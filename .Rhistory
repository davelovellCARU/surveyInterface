"Because I moved here", "Planting team", "Changed church", "Since Child", "Other", rep(NA,5),
rep(c("Not part of a church", "Was part of something", "Stopped during this period", rep(NA,7)),3),
"Not part of a church", "All my life", "Left, came back", "Copmlicated", rep(NA,6),
"Yes", "No", "Exploring", "Compicated", rep(NA,6),
"Yes", "No", "Rediscover", rep(NA,7)) %>%
matrix(ncol = 10, byrow = TRUE)
adultResponses
adultQuestions <-
c("Gender:\n",
"Age Group:\n",
"Regularity:\n",
"University:\n",
"Ethnicity:\n",
"Church History:\n",
"Join Reason:\n",
"0-10:\n",
"11-17:\n",
"18-24:\n",
"25+:\n",
"Christian:\n",
"Become here?")
adultResponses <- c("Male", "Female", "Other", rep(NA,7),
"11-15", "16-17", "18-24", "25-29", "30-34", "35-44", "45-54", "55-64", "65-74", "75+",
"Almost always", "About half the time", "A few times a year", rep(NA,7),
"Yes", "No", "I am currently a student", "I have done vocational training/apprenticeship", rep(NA,6),
"White", "Black", "Asian", "Other", "Prefer not to say", rep(NA,5),
"First church been part of", "Returning after a break", "Moved straight from another", "Part of another church as well", rep(NA,6),
"Because I moved here", "Planting team", "Changed church", "Since Child", "Other", rep(NA,5),
rep(c("Not part of a church", "Was part of something", "Stopped during this period", rep(NA,7)),3),
"Not part of a church", "All my life", "Left, came back", "Copmlicated", rep(NA,6),
"Yes", "No", "Exploring", "Compicated", rep(NA,6),
"Yes", "No", "Rediscover", rep(NA,7)) %>%
matrix(ncol = 10, byrow = TRUE) %>%
t
colnames(adultResponses = adultQuestions)
adultQuestions <-
c("Gender:\n",
"Age Group:\n",
"Regularity:\n",
"University:\n",
"Ethnicity:\n",
"Church History:\n",
"Join Reason:\n",
"0-10:\n",
"11-17:\n",
"18-24:\n",
"25+:\n",
"Christian:\n",
"Become here?")
adultResponses <- c("Male", "Female", "Other", rep(NA,7),
"11-15", "16-17", "18-24", "25-29", "30-34", "35-44", "45-54", "55-64", "65-74", "75+",
"Almost always", "About half the time", "A few times a year", rep(NA,7),
"Yes", "No", "I am currently a student", "I have done vocational training/apprenticeship", rep(NA,6),
"White", "Black", "Asian", "Other", "Prefer not to say", rep(NA,5),
"First church been part of", "Returning after a break", "Moved straight from another", "Part of another church as well", rep(NA,6),
"Because I moved here", "Planting team", "Changed church", "Since Child", "Other", rep(NA,5),
rep(c("Not part of a church", "Was part of something", "Stopped during this period", rep(NA,7)),3),
"Not part of a church", "All my life", "Left, came back", "Copmlicated", rep(NA,6),
"Yes", "No", "Exploring", "Compicated", rep(NA,6),
"Yes", "No", "Rediscover", rep(NA,7)) %>%
matrix(ncol = 10, byrow = TRUE) %>%
t
colnames(adultResponses) = adultQuestions
adultResponses
shiny::runApp()
runApp()
runApp()
shiny::runApp()
options(shiny.port = 6056)
options(shiny.port = 6056)
shiny::runApp()
tmp  = (function(vect){
# The questions on the adult survey
adultQuestions <-
c("Gender:\r\n",
"Age Group:\r\n",
"Regularity:\r\n",
"University:\r\n",
"Ethnicity:\r\n",
"Church History:\r\n",
"Join Reason:\r\n",
"0-10:\r\n",
"11-17:\r\n",
"18-24:\r\n",
"25+:\r\n",
"Christian:\r\n",
"Become here?\r\n")
adultResponses <- c("Male", "Female", "Other", rep(NA,7),
"11-15", "16-17", "18-24", "25-29", "30-34", "35-44", "45-54", "55-64", "65-74", "75+",
"Almost always", "About half the time", "A few times a year", rep(NA,7),
"Yes", "No", "I am currently a student", "I have done vocational training/apprenticeship", rep(NA,6),
"White", "Black", "Asian", "Other", "Prefer not to say", rep(NA,5),
"First church been part of", "Returning after a break", "Moved straight from another", "Part of another church as well", rep(NA,6),
"Because I moved here", "Planting team", "Changed church", "Since Child", "Other", rep(NA,5),
rep(c("Not part of a church", "Was part of something", "Stopped during this period", rep(NA,7)),3),
"Not part of a church", "All my life", "Left, came back", "Copmlicated", rep(NA,6),
"Yes", "No", "Exploring", "Compicated", rep(NA,6),
"Yes", "No", "Rediscover", rep(NA,7)) %>%
matrix(ncol = 10, byrow = TRUE) %>%
t
colnames(adultResponses) = adultQuestions
if (length(vect) > 0)
{
#Remove everything not needed from 'adultResponses'
adultResponses <-
adultResponses[1:length(vect), ]
outputString = ""
for (i in (1:length(vect))) {
outputString <- paste0(outputString,
adultQuestions[i],
adultResponses[vect[i], i],
"\r\n")
}
} else outputString <- "Gender:\r\n"
return(outputString)
})
tmp
tmp(1)
tmp(c(1,2))
debug(tmp)
tmp(1)
View(adultResponses)
runApp()
tmp = (function(vect){
# The questions on the adult survey
adultQuestions <-
c("Gender:\r\n",
"Age Group:\r\n",
"Regularity:\r\n",
"University:\r\n",
"Ethnicity:\r\n",
"Church History:\r\n",
"Join Reason:\r\n",
"0-10:\r\n",
"11-17:\r\n",
"18-24:\r\n",
"25+:\r\n",
"Christian:\r\n",
"Become here?\r\n")
adultResponses <- c("Male", "Female", "Other", rep(NA,7),
"11-15", "16-17", "18-24", "25-29", "30-34", "35-44", "45-54", "55-64", "65-74", "75+",
"Almost always", "About half the time", "A few times a year", rep(NA,7),
"Yes", "No", "I am currently a student", "I have done vocational training/apprenticeship", rep(NA,6),
"White", "Black", "Asian", "Other", "Prefer not to say", rep(NA,5),
"First church been part of", "Returning after a break", "Moved straight from another", "Part of another church as well", rep(NA,6),
"Because I moved here", "Planting team", "Changed church", "Since Child", "Other", rep(NA,5),
rep(c("Not part of a church", "Was part of something", "Stopped during this period", rep(NA,7)),3),
"Not part of a church", "All my life", "Left, came back", "Copmlicated", rep(NA,6),
"Yes", "No", "Exploring", "Compicated", rep(NA,6),
"Yes", "No", "Rediscover", rep(NA,7)) %>%
matrix(ncol = 10, byrow = TRUE) %>%
t
colnames(adultResponses) = adultQuestions
if (length(vect) > 0)
{
#Remove everything not needed from 'adultResponses'
adultResponses <-
adultResponses[,1:length(vect)]
outputString = ""
for (i in (1:length(vect))) {
outputString <- paste0(outputString,
adultQuestions[i],
adultResponses[vect[i], i],
"\r\n")
}
} else outputString <- "Gender:\r\n"
return(outputString)
})
tmp
tmp(10)
tmp(1)
debug(tmp)
tmp(1)
runApp()
logs()
log(0)
log()
runApp(here::here("app.R"),port = 6056)
## This is a oneLine script that runs the shiny app on the right port
require("here")
require("shiny")
runApp(here::here("app.R"),port = 6056)
runApp(here::here("app.R"),port = 6056,
display.mode = "showcase")
runApp(here::here("app.R"),port = 6056,
display.mode = "showcase")
runApp(here::here("app.R"),port = 6056,
display.mode = "showcase")
runApp(here::here("app.R"),port = 6056,
display.mode = "showcase")
runApp(here::here("app.R"),port = 6056,
display.mode = "showcase")
runApp(here::here("app.R"),port = 6056,
display.mode = "showcase")
runApp(here::here("app.R"),port = 6056,
display.mode = "showcase")
runApp(here::here("app.R"),port = 6056,
display.mode = "showcase")
runApp(here::here("app.R"),port = 6056,
display.mode = "showcase")
runApp(here::here("app.R"),port = 6056,
display.mode = "showcase")
runApp(here::here("app.R"),port = 6056,
display.mode = "showcase")
runApp(here::here("app.R"),port = 6056,
display.mode = )
require("digest")
require("magrittr")
readClipboard %>% digest %>% writeClipboard
readClipboard()
readClipboard %>% sapply(.,digest)
readClipboard %>% digest
readClipboard %>% sapply(.,digest)
readClipboard %>% apply(.,digest)
readClipboard %>% apply(.,1,digest)
history()
readClipboard() %>% sapply(digest) %>% writeClipboard()
readClipboard() %>% sapply(digest) %>% writeClipboard()
knitr::opts_chunk$set(echo = TRUE)
# NB not sure if this wi
require("magrittr") # For pipes
require("digest")     # For hashing
### You’ve got to run the line below with some table data (a single column) in the clipboard ###
### `sapply` means you get a column of digests, rather than one digest for the whole column
readClipboard %>% sapply(digest::digest()) %>% writeClipboard
# NB not sure if this wi
require("magrittr") # For pipes
require("digest")     # For hashing
### You’ve got to run the line below with some table data (a single column) in the clipboard ###
### `sapply` means you get a column of digests, rather than one digest for the whole column
readClipboard %>% sapply(digest::digest) %>% writeClipboard
# Now I go and paste back into the place that I copied from
### You’ve got to run the line below with some table data (a single column) in the clipboard ###
### `sapply` means you get a column of digests, rather than one digest for the whole column
readClipboard %>% sapply(digest::digest) %>% writeClipboard
readClipboard()
readClipboard %>% sapply(digest)
readClipboard %>% sapply(tolower)
readClipboard()
readClipboard() %>% sapply(digest)
readClipboard %>% sapply(digest)
readClipboard() %>% sapply(digest)
### You’ve got to run the line below with some table data (a single column) in the clipboard ###
### `sapply` means you get a column of digests, rather than one digest for the whole column
readClipboard() %>% sapply(digest::digest) %>% writeClipboard
writeClipboard()
writeClipboard(NULL)
writeClipboard(0)
### The code ---------------------------------------------------------------------------------------
readClipboard() %>% sapply(digest::digest) %>% writeClipboard
writeClipboard("david.lovell@churcharmy.org
elspeth.mcgann@churcharmy.org
fiona.tweedie@churcharmy.org
andy.wier@churcharmy.org
tim.ling@churcharmy.org")
readClipboard()
writeClipboard("david.lovell@churcharmy.org
elspeth.mcgann@churcharmy.org
fiona.tweedie@churcharmy.org
andy.wier@churcharmy.org
tim.ling@churcharmy.org")
### The code ---------------------------------------------------------------------------------------
readClipboard() %>% sapply(digest::digest) %>% writeClipboard
readClipboard()
require(digest)
sha1(241413)
sha1("241413")
sha1("241413", digits = 2)
sha1("241413", digits = 2)
sha1("241413", digits = 1)
sha1("241413", digits = 10)
sha1("241413", digits = NULL)
?sha1
sha1("241413")
sha1("241413",)
sha1("241413",digits = 14, zapsmall = 7)
knitr::opts_chunk$set(echo = TRUE)
### Required packages ------------------------------------------------------------------------------
require("magrittr")   # For pipes
require("digest")     # For hashing
### Pretend this is you copying some data from an excel spreadsheet: -------------------------------
writeClipboard(
"david.lovell@churcharmy.org
Elspeth.Mcgann@churcharmy.org
fiona.tweedie@churcharmy.org
andy.wier@churcharmy.org
tim.ling@churcharmy.org     ") # <- some whitespace there
### The code ---------------------------------------------------------------------------------------
### ### `sapply` means you get a column of digests, rather than one digest for the whole column  ###
### NB the '()' after 'readClipboard' are vital - otherwise you the hash of the function itself  ###
readClipboard() %>% sapply(digest::digest) %>% writeClipboard
### Now I go and paste back into the place that I copied from. EZ!
readClipboard()
### Required packages ------------------------------------------------------------------------------
require("magrittr")   # For pipes
require("digest")     # For hashing
require("stringr")    # For cleaning strings
### Pretend this is you copying some data from an excel spreadsheet: -------------------------------
writeClipboard(
"david.lovell@churcharmy.org
elspeth.mcgann@churcharmy.org
fiona.tweedie@churcharmy.org
andy.wier@churcharmy.org
tim.ling@churcharmy.org     ") # <- some whitespace there
### clean up the data
readClipboard() %>%
as.character() %>% #Not sure if this is strictly neccesary, but a worthy precaution:
## If `sha1()` gets hold of a double it will treat it differntly from a string
stringr::str_trim %>% # remove whitespace
stringr::str_to_lower -> # remove capital letters
tmp
### Required packages ------------------------------------------------------------------------------
require("magrittr")   # For pipes
require("digest")     # For hashing
require("stringr")    # For cleaning strings
### Pretend this is you copying some data from an excel spreadsheet: -------------------------------
writeClipboard(
"david.lovell@churcharmy.org
elspeth.mcgann@churcharmy.org
fiona.tweedie@churcharmy.org
andy.wier@churcharmy.org
tim.ling@churcharmy.org     ") # <- some whitespace there
### clean up the data
readClipboard() %>%
as.character() %>% #Not sure if this is strictly neccesary, but a worthy precaution:
## If `sha1()` gets hold of a double it will treat it differntly from a string
(stringr::str_trim) %>% # remove whitespace
(stringr::str_to_lower) -> # remove capital letters
tmp
### The code ---------------------------------------------------------------------------------------
### Now were explicitly using the SHA-1 alogrithm
### This function should work the same on 32 and 64 bit systems
### The 'digits' and 'zapsmall' arguments are here expicitly set to their defaults,
### which seems safest for transparent reproducibility. `sha1(.)` will give the same result as below,
### but any change to digits or zapsmall will give output at entirely different digest.
tmp %>% sapply(digest::sha1(., digits = 14, zapsmall = 7)) %>% writeClipboard
writeClipboard(here)
writeClipboard(here())
require("here")
setwd(here())
source("runAppScript.R")
runApp(here::here("app.R"),port = 6056,
display.mode = )
?runApp
"65" %>% (switch("34" = 2))
"65" %>% switch("34" = 2)
"65" %>% switch("65" = 2)
"65" %>% switch("65" = 2, "12" = "text")
"12" %>% switch("65" = 2, "12" = "text")
## This is a oneLine script that runs the shiny app on the right port
require("here")
require("shiny")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
c("1")[0]
c("1")[0:0]
c("1")[0:1]
## This is a oneLine script that runs the shiny app on the right port
require("here")
require("shiny")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
character(0)
c(character(0),"c")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
is.character(character(0))
"1"[NA]
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
c(character(0),character(0))
c(character(0),"d", character(0))
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
"1"[-1]
character(0)[-1]
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
character(0) %>%
(function(newNum){
# A non-assigned key is pressed, or one of the 'standard' keys:
if(length(newNum) == 0 || is.na(newNum) || newNum <900) thisOut <- c(values$pressHistory,newNum) else
# Over 900 is `backspace` - so take last val off of pressHistory
thisout <- values$pressHistory[0:max(0,(length(values$pressHistory)-1))]
})
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "showcase")
character(0) %>% (function(newNum){
# A non-assigned key is pressed, or one of the 'standard' keys:
if(length(newNum) == 0 || is.na(newNum) || newNum <900) thisOut <- c(values$pressHistory,newNum) else
# Over 900 is `backspace` - so take last val off of pressHistory
thisOut <- values$pressHistory[0:max(0,(length(values$pressHistory)-1))]
return(thisOut)
})
(character(0))[0:max(0,(length(character(0))-1))]
runApp()
runApp(here::here("app.R"),port = 6056,
display.mode = "showcase")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
outputString
outputString
values$pressHistory
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
1[11]
1[-1]
1[-1,2]
options(error = recover)
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
ls()
ls()
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
"ehehfe"[0,1]
matrix(c("dfjsdjf","jf2j","dfsjklafj","dskjaflsdaj"), nrow = 2)
matrix(c("dfjsdjf","jf2j","dfsjklafj","dskjaflsdaj"), nrow = 2)[0,1]
matrix(c("dfjsdjf","jf2j","dfsjklafj","dskjaflsdaj"), nrow = 2)[NA,1]
matrix(c("dfjsdjf","jf2j","dfsjklafj","dskjaflsdaj"), nrow = 2)[character(0)[1],1]
paste0(matrix(c("dfjsdjf","jf2j","dfsjklafj","dskjaflsdaj"), nrow = 2)[character(0)[1],1], "djfd")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
1[1]
1[400]
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
require(shiny)
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
runApp(here::here("app.R"),port = 6056,
display.mode = "normal")
exit
q("no")
